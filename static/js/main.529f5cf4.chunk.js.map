{"version":3,"sources":["components/Searchbox.js","App.js","serviceWorker.js","index.js"],"names":["Searchbox","props","state","foodName","foodId","isLoading","nutritionInfo","calories","carbs","protein","fat","handleChange","event","setState","target","value","handleSubmit","bind","preventDefault","idFetchUrl","this","fetch","response","json","data","results","length","nutritionFactFetchUrl","onSubmit","onChange","Button","variant","type","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yTAGqBA,E,kDAYnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAZRC,MAAQ,CACNC,SAAU,GACVC,QAAS,EACTC,WAAW,EACXC,cAAe,GACfC,UAAW,EACXC,OAAQ,EACRC,SAAU,EACVC,KAAM,GAGW,EAKnBC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZV,SAAUS,EAAME,OAAOC,SALzB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAFH,E,kGAWAL,G,oFACjBA,EAAMM,iBAEFC,EACF,qGACAC,KAAKlB,MAAMC,S,SAEQkB,MAAMF,G,cAAvBG,E,gBACaA,EAASC,O,UACE,KADxBC,E,QACKC,QAAQC,O,iBACfN,KAAKP,SAAS,CACZT,QAAS,M,+BAGXgB,KAAKP,SAAS,CACZT,OAAQoB,EAAKC,QAAQ,GAAb,GACRtB,SAAUqB,EAAKC,QAAQ,GAAb,QAGRE,EACF,uCACAP,KAAKlB,MAAME,OACX,gE,UACeiB,MAAMM,G,eAAvBL,E,iBACaA,EAASC,O,QAAtBC,E,OACAJ,KAAKP,SAAS,CACZP,cAAekB,EACfjB,SAAUiB,EAAI,SACdhB,MAAOgB,EAAI,MACXf,QAASe,EAAI,QACbd,IAAKc,EAAI,IACTnB,WAAW,I,uIAMf,OAAIe,KAAKlB,MAAMG,UAEX,0BAAMuB,SAAUR,KAAKJ,cACnB,2BAAOD,MAAOK,KAAKlB,MAAMC,SAAU0B,SAAUT,KAAKT,eAClD,kBAACmB,EAAA,EAAD,CAAQC,QAAQ,SAASC,KAAK,UAA9B,YAK4B,MAAvBZ,KAAKlB,MAAME,OAElB,6BACE,0BAAMwB,SAAUR,KAAKJ,cACnB,2BAAOD,MAAOK,KAAKlB,MAAMC,SAAU0B,SAAUT,KAAKT,eAClD,kBAACmB,EAAA,EAAD,CAAQC,QAAQ,SAASC,KAAK,UAA9B,WAHJ,mBAYA,6BACE,0BAAMJ,SAAUR,KAAKJ,cACnB,2BAAOD,MAAOK,KAAKlB,MAAMC,SAAU0B,SAAUT,KAAKT,eAClD,kBAACmB,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,UAA/B,WAIF,sCAAYZ,KAAKlB,MAAMC,UACvB,0CAAgBiB,KAAKlB,MAAMK,UAC3B,+CAAqBa,KAAKlB,MAAMM,OAChC,yCAAeY,KAAKlB,MAAMO,SAC1B,qCAAWW,KAAKlB,MAAMQ,U,GA9FOuB,aCUxBC,E,uKAPX,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,W,GAJUF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.529f5cf4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport default class Searchbox extends Component {\r\n  state = {\r\n    foodName: \"\",\r\n    foodId: -1,\r\n    isLoading: true,\r\n    nutritionInfo: [],\r\n    calories: -1,\r\n    carbs: -1,\r\n    protein: -1,\r\n    fat: -1,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      foodName: event.target.value,\r\n    });\r\n  };\r\n\r\n  async handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    let idFetchUrl =\r\n      \"https://api.spoonacular.com/recipes/search?apiKey=a679b3e0dd8a42219da1bef675fcbd94&number=1&query=\" +\r\n      this.state.foodName;\r\n\r\n    let response = await fetch(idFetchUrl);\r\n    let data = await response.json();\r\n    if (data.results.length === 0) {\r\n      this.setState({\r\n        foodId: -1000,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        foodId: data.results[0][\"id\"],\r\n        foodName: data.results[0][\"title\"],\r\n      });\r\n\r\n      let nutritionFactFetchUrl =\r\n        \"https://api.spoonacular.com/recipes/\" +\r\n        this.state.foodId +\r\n        \"/nutritionWidget.json?apiKey=a679b3e0dd8a42219da1bef675fcbd94\";\r\n      response = await fetch(nutritionFactFetchUrl);\r\n      data = await response.json();\r\n      this.setState({\r\n        nutritionInfo: data,\r\n        calories: data[\"calories\"],\r\n        carbs: data[\"carbs\"],\r\n        protein: data[\"protein\"],\r\n        fat: data[\"fat\"],\r\n        isLoading: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.isLoading) {\r\n      return (\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input value={this.state.foodName} onChange={this.handleChange} />\r\n          <Button variant=\"danger\" type=\"submit\">\r\n            Search\r\n          </Button>\r\n        </form>\r\n      );\r\n    } else if (this.state.foodId === -1000) {\r\n      return (\r\n        <div>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <input value={this.state.foodName} onChange={this.handleChange} />\r\n            <Button variant=\"danger\" type=\"submit\">\r\n              Search\r\n            </Button>\r\n          </form>\r\n          Food not found.\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <input value={this.state.foodName} onChange={this.handleChange} />\r\n            <Button variant=\"success\" type=\"submit\">\r\n              Search\r\n            </Button>\r\n          </form>\r\n          <div>Food: {this.state.foodName}</div>\r\n          <div>Calories: {this.state.calories}</div>\r\n          <div>Carbohydrates: {this.state.carbs}</div>\r\n          <div>Protein: {this.state.protein}</div>\r\n          <div>Fat: {this.state.fat}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Searchbox from \"./components/Searchbox\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Searchbox />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}